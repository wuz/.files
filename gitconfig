[push]
  default = simple
[user]
	name = Conlin Durbin
	email = conlin@lessonly.com
  signingkey = CAA69BFC5EF24C40
[alias]
  # quick command aliases
  A = add -A
  cam = commit -am
  ca = commit -a
  cm = commit -m
  ci = commit
  co = checkout
  st = status
  br = branch -v
  unstage = reset HEAD -- #take file out of staged commit
  find = !sh -c 'git ls-tree -r --name-only HEAD | grep --color $1' - #find a file tracked by git
  k = !gitk #use gitk for conflicts
  g = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative #pretty oneline log
  sl = stash list --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative #pretty oneline stash list
  h = !git --no-pager log origin/master..HEAD --abbrev-commit --pretty=oneline #pretty oneline graph of what is different from origin/master
  pom = !sh -c 'git h && echo Ready to push? ENTER && read && git push origin master' - #push current changes to master
  pomt = !sh -c 'git h && echo Ready to push? ENTER && read && git push origin master && git push origin master --tags' -  #push to origin master with tags
  purm = !sh -c 'test "$#" = 1 && git h && git checkout master && git pull --ff-only && git checkout \"$1\" && git rebase master && exit 0 || echo \"usage: git purm <branch>\" >&2 && exit 1' - #pull and rebase master
  rem = !sh -c 'test "$#" = 1 && git h && git checkout master && git pull --ff-only && git checkout \"$1\" && git rebase master && git checkout master && git merge \"$1\" && echo Done and ready to do: git pom && exit 0 || echo \"usage: git rem <branch>\" >&2 && exit 1' - # merge current branch into master
  rpom = !git pull --rebase && git pom # rebase and push to origin/master
  lt = !git describe $(git rev-list --tags --max-count=1) #list tags
  ri = "!f() { if [ -z $1 ]; then val=$(git --no-pager log origin/master..HEAD --pretty=oneline | wc -l); else val=$1; fi; git rebase -i HEAD~$val; }; f" #interactive rebase some number of commits
  qc = !git commit -a -m '____QUICK COMMIT - REMOVE WITH REBASE' #quick commit to for rebasing needs
  get = !git pull --ff-only #better git pull
  got = "!f() { CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD) && git checkout $2 && git pull origin $1 --ff-only && git checkout $CURRENT_BRANCH;  }; f" #git get for another branch
  who = shortlog -n -s --no-merges # who has committed to this project
  cleanup = "!git remote prune origin && git branch -vv | grep ': gone]' | cut -d ' ' -f 3 | xargs -n 1 git branch -D"
  fco="!f() { git branch -a -vv --color=always | grep -v '/HEAD\\s' | fzf -q "$1" --height=40% --ansi --tac --color=16 --border | sed "s/^..//" | awk '{print $1}' | sed "s_^remotes/[^/]*/__" | xargs git co; }; f"
  new = checkout -b
[commit]
  template = ~/.gitmessage
  gpgsign = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
